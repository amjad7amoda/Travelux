const mongoose = require('mongoose');

const flightSchema = new mongoose.Schema({

    // auto filled from airline of the airline owner
    airline: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Airline',
        required: true
    },
    // sended by airline owner
    plane: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Plane',
        required: true
    },
    // auto generated by middleware
    flightNumber: {
        type: String,
        required: true,
        unique: true,
        maxLength: [10, 'Flight number must be less than 10 characters'],
        minLength: [3, 'Flight number must be at least 3 characters'],
    },


    // departure info
    // sended by airline owner
    departureCountry: {
        name: {
            type: String,
            required: true
        },
        // auto filled from europeanCountries.json
        code: {
            type: String,
            required: true
        }
    },
    departureAirport: {
        // sended by airline admin
        name: {
            type: String,
            required: true
        },
        // auto filled from europeanAirports.json
        iata: {
            type: String,
            required: true
        },
        city: {
            type: String,
            required: true
        },
        country: {
            type: String,
            required: true
        }
    },
    departureDate: {
        type: Date,
        required: true
    },



    // arrival info
    // sended by airline owner
    arrivalCountry: {
        name: {
            type: String,
            required: true
        },
        // auto filled from europeanCountries.json
        code: {
            type: String,
            required: true
        }
    },
    arrivalAirport: {
        // sended by airline admin
        name: {
            type: String,
            required: true
        },
        // auto filled from europeanAirports.json
        iata: {
            type: String,
            required: true
        },
        city: {
            type: String,
            required: true
        },
        country: {
            type: String,
            required: true
        }
    },
    // auto calculated from departureDate and duration by middleware
    arrivalDate: {
        type: Date,
        required: true
    },


    // price
    // sended by airline owner
    priceEconomy: {
        type: Number,
        required: true
    },
    // sended by airline owner
    priceBusiness: {
        type: Number,
        required: true
    },

    // status
    // auto filled from default value
    status: {
        type: String,
        enum: ['pending', 'onTheWay', 'successful', 'cancelled'],
        default: 'pending'
    },

    // seat map
    // auto generated from plane seats number and type by middleware
    seatMap: [
        {
          seatNumber: {
            type: String,
            required: true
          },
          type: {
            type: String,
            enum: ['business', 'economy'],
            required: true
          },
          isBooked: {
            type: Boolean,
            default: false
          },
          bookedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            default: null
          }
        }
      ],

    // gate number
    // auto generated by middleware
    gateNumber: {
        type: String,
        required: true
    },
    // duration in minutes
    // sended by airline owner
    duration: {
        type: Number,
        required: true
    },    
    tripType: {
        type: String,
        enum: ['outbound', 'return'],
        required: true
    },
    // id of the return flight [just for outbound trip]
    returnFlight: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Flight',
        required: false
    }

}, {timestamps: true});

// mongoose middleware to make limit fields just on get all flights
// and populate all the fields of the airline
flightSchema.pre('find', function(next) {
    // skip populate if skip is true
    if(this.options.skip) {
        return next();
    }

    this.select('departureDate arrivalDate duration priceEconomy priceBusiness departureAirport arrivalAirport returnFlight gateNumber');
    this.populate({
        path: 'airline',
        select: 'name logo'
    });
    next();
});

const Flight = mongoose.model('Flight', flightSchema);

module.exports = Flight;





